{"name": "上交所协商成交_正常申报", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0 == 1", "trace": "data = (1, '协商成交（XSCJ_SHG）_正向用例', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data',read_excel())\n    def test_shg_fix(data):\n        logging.info(data)\n        if data[12] == 'no':\n            pytest.skip(\"标记该用例为不执行\")\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string('data/temp.xml')\n                    logging.info(data_xml)\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    logging.info(result)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n>                               temp_item = eval(item)\nE                                 File \"<string>\", line 1\nE                                   {\"ORDSTATUS\":5\nE                                   ^\nE                               SyntaxError: '{' was never closed\n\ntestcase\\test_case_fix_excel.py:139: SyntaxError\n\nDuring handling of the above exception, another exception occurred:\n\ndata = (1, '协商成交（XSCJ_SHG）_正向用例', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data',read_excel())\n    def test_shg_fix(data):\n        logging.info(data)\n        if data[12] == 'no':\n            pytest.skip(\"标记该用例为不执行\")\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string('data/temp.xml')\n                    logging.info(data_xml)\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    logging.info(result)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n>                           assert 0 == 1\nE                           assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:145: AssertionError"}, "description": "上交所协商成交各接口各要素正确，申报成功", "steps": [{"name": "发送webservice请求", "status": "passed", "parameters": [{"name": "action", "value": "'1101'"}, {"name": "data", "value": "'<?xml version='1.0' encoding='utf-8'?>\n<root>\n  <header>\n    <msgType>R</msgType>\n    <action>1101</action>\n    <clientID>xIR</clientID>\n    <reqSn>7897b7e19186472f823bad3d04ec9799</reqSn>\n    <sendDateTime>2023-07-10 14:11:11</sendDateTime>\n    <fromIPMAC>191.168.0.53,</fromIPMAC>\n  </header>\n  <body>\n    <orders>\n      <order>\n        <secuExtAccid>B883056635</secuExtAccid>\n        <orderType>9</orderType>\n        <dir>S</dir>\n        <iCode>010706</iCode>\n        <sysOrdID>1688969471</sysOrdID>\n        <iName>MDe5+tWuMDY=</iName>\n        <exeMarket>XSHG_FIX</exeMarket>\n        <ownerType>103</ownerType>\n        <bOrdCount>0</bOrdCount>\n        <bOrdPrice>0</bOrdPrice>\n        <sOrdCount>120</sOrdCount>\n        <sOrdPrice>102.889</sOrdPrice>\n        <settlType>103</settlType>\n        <settlPeriod />\n        <lastParPx>0</lastParPx>\n        <cashMargin>1</cashMargin>\n        <memo />\n        <ordDate>2023-07-10</ordDate>\n        <ordTime>14:11:11</ordTime>\n        <matchNo>110</matchNo>\n        <product>01</product>\n        <tradeType>10</tradeType>\n        <company>316</company>\n        <trader>Z31608</trader>\n        <seatno>88045</seatno>\n        <obTrader>Z31606</obTrader>\n        <iceCount>0</iceCount>\n        <clientOrdid>lwy111</clientOrdid>\n        <accname>lwy_shg_B883056635</accname>\n        <shareProperty>01</shareProperty>\n      </order>\n    </orders>\n    <accountInfo>\n      <cashExtAccID>lwy_wbzj_jys</cashExtAccID>\n      <cashExtAccName>lwy_shg_001</cashExtAccName>\n      <cashAccID>LWY_NBZJ_JYS</cashAccID>\n      <cashAccIDAccName>LWY_NBZJ_JYS</cashAccIDAccName>\n      <xirSecuExtAccID>lwy_wbzq_sh_02</xirSecuExtAccID>\n      <xirSecuExtAccName>lwy_wbzq_sh_02</xirSecuExtAccName>\n      <secuAccID>LWY_NBZQ_JYS</secuAccID>\n      <secuAccName>LWY_NBZQ_JYS</secuAccName>\n    </accountInfo>\n    <terminalInfo>\n      <clientPublicIpAddress />\n      <clientPublicPort />\n      <clientInnerIpAddress />\n      <clientMacaddress />\n      <clientHarddiskno />\n      <clientPcname />\n      <clientCpuno />\n      <clientDiskpartitioninfo />\n      <clientReellabel />\n      <clientName>xIRCS</clientName>\n      <clientVersion />\n      <isTerminalinfo>0</isTerminalinfo>\n    </terminalInfo>\n  </body>\n</root>'"}], "start": 1688969471517, "stop": 1688969471671}], "attachments": [{"name": "log", "source": "bc7b57aa-93a8-4f38-ae96-7287617c5795-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e5dbdc66-94b3-40dc-8234-11987035c43d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "(1, '协商成交（XSCJ_SHG）_正向用例', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"110\",\"sysOrdID\":\"\"}', 'select t.ordstatus,t.errinfo from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5', '预期结果值转换成字典格式失败，请检查预期结果列数据！！！', 'yes', '上交所固收（XSHG_FIX）')"}], "start": 1688969471503, "stop": 1688969476680, "uuid": "4e0a295a-4250-4d00-a806-c899b39ccd3a", "historyId": "265adea49dc77b8a63c576d8d64c9972", "testCaseId": "f6e2060948b5ee0332e39a62acbaca68", "fullName": "testcase.test_case_fix_excel#test_shg_fix", "labels": [{"name": "feature", "value": "上交所固收（XSHG_FIX）"}, {"name": "story", "value": "协商成交（XSCJ_SHG）_正向用例"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_case_fix_excel"}, {"name": "host", "value": "HT-LPC-0297"}, {"name": "thread", "value": "62772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_case_fix_excel"}]}