{"uid":"3da60df76ed71df0","name":"上交所协商成交_正常申报","fullName":"testcase.test_case_fix_excel#test_shg_fix","historyId":"dc442969129dc025a45d080c02b17c1d","time":{"start":1687676867160,"stop":1687676870469,"duration":3309},"description":"上交所协商成交各接口各要素正确，申报成功","descriptionHtml":"<p>上交所协商成交各接口各要素正确，申报成功</p>\n","status":"failed","statusMessage":"AssertionError: assert 2 == 5","statusTrace":"data = (1, '上交所固收（XSHG_FIX）', '协商成交（XSCJ_SHG）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', ...)\n\n    @pytest.mark.parametrize('data', read_excel('data/step_case.xlsx'))\n    def test_shg_fix(data):\n    \n        # 动态生成测试用例的feature、story、title、description、severity\n        if data[1] is not None:\n            allure.dynamic.feature(data[1])\n        if data[2] is not None:\n            allure.dynamic.story(data[2])\n        if data[3] is not None:\n            allure.dynamic.title(data[3])\n        if data[4] is not None:\n            allure.dynamic.description(data[4])\n        if data[5] is not None:\n            allure.dynamic.severity(data[5])\n        # 获取当前行数\n        row_num = data[0] + 1\n        try:\n            # 将从excel中读取的数据放入参数中\n            # 获取功能号单元格的数据数据\n            action_str = str(data[6])\n            # 获取需要读取的xml文件数据\n            xml_str = data[7]\n            # 获取需要重新设置的参数数据\n            param_str = data[8]\n            # 各个数据分别使用“;”分开，获取list\n            act_list = action_str.split(';')\n            xml_list = xml_str.split(';')\n            param_list = param_str.split(';')\n        except :\n            print('接口请求格式有误，请检查action、报文路径、参数')\n        # 对于每一行action有多个数据时，循环发送请求\n        for i in range(len(act_list)):\n            # 获取当前系统的时间\n            long_date, local_date, local_time = tools.get_system_time()\n            # 当前请求的参数设置\n            param_list_i = eval(param_list[i])\n    \n            # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n            param_list_i['sendDateTime'] = long_date\n            param_list_i['ordDate'] = local_date\n            param_list_i['ordTime'] = local_time\n            param_list_i['actDate'] = local_date\n            param_list_i['actTime'] = local_time\n            param_list_i['orgOrdDate'] = local_date\n    \n            # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n            if 'sysOrdID' in param_list_i.keys():\n                sysord_id = str(int(time.time()))\n                param_list_i['sysOrdID'] = sysord_id\n                all_val['sysOrdID'] = sysord_id\n    \n            # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n            if 'orgSysOrdID' in param_list_i.keys():\n                param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n            # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n            set_xml(xml_list[i], param_list_i)\n            data_xml = set_xml_string(xml_list[i])\n            # 发送请求\n            result = tools.send_post(act_list[i], data_xml)\n            time.sleep(3)\n    \n        if data[9] is not None and data[10] is not None and data[11] is not None:\n            # 查询数据库的基础sql\n            sql_str = data[9]\n            sql_str_list = sql_str.split(';')\n            for i in range(len(sql_str_list)):\n                # 数据库变量\n                sql_param_str = data[10]\n                # 将数据库变量用\";\"分隔\n                sql_param_list = sql_param_str.split(';')\n                # 存储经过转换后的数据库变量\n                param_list_num = []\n                # 获取列表长度\n                length = len(sql_param_list)\n                # 循环解析all_val[]值并填入list1\n                for j in range(length):\n                    param_list_num.append(eval(sql_param_list[j]))\n                sql = sql_str_list[i].format(*param_list_num)\n                hope_result = data[11]\n                hope_result_list = hope_result.split(';')\n                hope_result_dic_list =  []\n                for item in hope_result_list:\n                    temp_item = eval(item)\n                    hope_result_dic_list.append(temp_item)\n                    try:\n                        result_list = tools.oracle_link(sql)\n                    except :\n                        print('sql语句有误，请检查！！！')\n                for key in hope_result_dic_list[i].keys():\n                    with allure.step(f\"1、数据库{key}断言\"):\n                        with allure.step(f'预期结果：{key}={hope_result_dic_list[i][key]}'):\n                            real_result = result_list[key]\n                        with allure.step(f'实际结果：{key}={real_result}'):\n>                           assert real_result == hope_result_dic_list[i][key]\nE                           assert 2 == 5\n\ntestcase\\test_case_fix_excel.py:117: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init","time":{"start":1687676865111,"stop":1687676867157,"duration":2046},"status":"passed","steps":[{"name":"连接数据查询","time":{"start":1687676865112,"stop":1687676867157,"duration":2045},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.init_date from ttrd_fix_setflag t'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel","time":{"start":1687676867157,"stop":1687676867158,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"上交所协商成交各接口各要素正确，申报成功","status":"failed","statusMessage":"AssertionError: assert 2 == 5","statusTrace":"data = (1, '上交所固收（XSHG_FIX）', '协商成交（XSCJ_SHG）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', ...)\n\n    @pytest.mark.parametrize('data', read_excel('data/step_case.xlsx'))\n    def test_shg_fix(data):\n    \n        # 动态生成测试用例的feature、story、title、description、severity\n        if data[1] is not None:\n            allure.dynamic.feature(data[1])\n        if data[2] is not None:\n            allure.dynamic.story(data[2])\n        if data[3] is not None:\n            allure.dynamic.title(data[3])\n        if data[4] is not None:\n            allure.dynamic.description(data[4])\n        if data[5] is not None:\n            allure.dynamic.severity(data[5])\n        # 获取当前行数\n        row_num = data[0] + 1\n        try:\n            # 将从excel中读取的数据放入参数中\n            # 获取功能号单元格的数据数据\n            action_str = str(data[6])\n            # 获取需要读取的xml文件数据\n            xml_str = data[7]\n            # 获取需要重新设置的参数数据\n            param_str = data[8]\n            # 各个数据分别使用“;”分开，获取list\n            act_list = action_str.split(';')\n            xml_list = xml_str.split(';')\n            param_list = param_str.split(';')\n        except :\n            print('接口请求格式有误，请检查action、报文路径、参数')\n        # 对于每一行action有多个数据时，循环发送请求\n        for i in range(len(act_list)):\n            # 获取当前系统的时间\n            long_date, local_date, local_time = tools.get_system_time()\n            # 当前请求的参数设置\n            param_list_i = eval(param_list[i])\n    \n            # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n            param_list_i['sendDateTime'] = long_date\n            param_list_i['ordDate'] = local_date\n            param_list_i['ordTime'] = local_time\n            param_list_i['actDate'] = local_date\n            param_list_i['actTime'] = local_time\n            param_list_i['orgOrdDate'] = local_date\n    \n            # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n            if 'sysOrdID' in param_list_i.keys():\n                sysord_id = str(int(time.time()))\n                param_list_i['sysOrdID'] = sysord_id\n                all_val['sysOrdID'] = sysord_id\n    \n            # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n            if 'orgSysOrdID' in param_list_i.keys():\n                param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n            # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n            set_xml(xml_list[i], param_list_i)\n            data_xml = set_xml_string(xml_list[i])\n            # 发送请求\n            result = tools.send_post(act_list[i], data_xml)\n            time.sleep(3)\n    \n        if data[9] is not None and data[10] is not None and data[11] is not None:\n            # 查询数据库的基础sql\n            sql_str = data[9]\n            sql_str_list = sql_str.split(';')\n            for i in range(len(sql_str_list)):\n                # 数据库变量\n                sql_param_str = data[10]\n                # 将数据库变量用\";\"分隔\n                sql_param_list = sql_param_str.split(';')\n                # 存储经过转换后的数据库变量\n                param_list_num = []\n                # 获取列表长度\n                length = len(sql_param_list)\n                # 循环解析all_val[]值并填入list1\n                for j in range(length):\n                    param_list_num.append(eval(sql_param_list[j]))\n                sql = sql_str_list[i].format(*param_list_num)\n                hope_result = data[11]\n                hope_result_list = hope_result.split(';')\n                hope_result_dic_list =  []\n                for item in hope_result_list:\n                    temp_item = eval(item)\n                    hope_result_dic_list.append(temp_item)\n                    try:\n                        result_list = tools.oracle_link(sql)\n                    except :\n                        print('sql语句有误，请检查！！！')\n                for key in hope_result_dic_list[i].keys():\n                    with allure.step(f\"1、数据库{key}断言\"):\n                        with allure.step(f'预期结果：{key}={hope_result_dic_list[i][key]}'):\n                            real_result = result_list[key]\n                        with allure.step(f'实际结果：{key}={real_result}'):\n>                           assert real_result == hope_result_dic_list[i][key]\nE                           assert 2 == 5\n\ntestcase\\test_case_fix_excel.py:117: AssertionError","steps":[{"name":"发送webservice请求","time":{"start":1687676867194,"stop":1687676867390,"duration":196},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"action","value":"'1101'"},{"name":"data","value":"'<root>\n  <header>\n    <msgType>R</msgType>\n    <action>1101</action>\n    <clientID>xIR</clientID>\n    <reqSn>7897b7e19186472f823bad3d04ec9799</reqSn>\n    <sendDateTime>2023-06-25 15:07:47</sendDateTime>\n    <fromIPMAC>191.168.0.53,</fromIPMAC>\n  </header>\n  <body>\n    <orders>\n      <order>\n        <secuExtAccid>B883056635</secuExtAccid>\n        <orderType>9</orderType>\n        <dir>S</dir>\n        <iCode>010706</iCode>\n        <sysOrdID>1687676867</sysOrdID>\n        <iName>MDe5+tWuMDY=</iName>\n        <exeMarket>XSHG_FIX</exeMarket>\n        <ownerType>103</ownerType>\n        <bOrdCount>0</bOrdCount>\n        <bOrdPrice>0</bOrdPrice>\n        <sOrdCount>120</sOrdCount>\n        <sOrdPrice>102.889</sOrdPrice>\n        <settlType>103</settlType>\n        <settlPeriod />\n        <lastParPx>0</lastParPx>\n        <cashMargin>1</cashMargin>\n        <memo />\n        <ordDate>2023-06-25</ordDate>\n        <ordTime>15:07:47</ordTime>\n        <matchNo>510</matchNo>\n        <product>01</product>\n        <tradeType>10</tradeType>\n        <company>316</company>\n        <trader>Z31608</trader>\n        <seatno>88045</seatno>\n        <obTrader>Z31605</obTrader>\n        <iceCount>0</iceCount>\n        <clientOrdid>lwy111</clientOrdid>\n        <accname>lwy_shg_B883056635</accname>\n        <shareProperty>01</shareProperty>\n      </order>\n    </orders>\n    <accountInfo>\n      <cashExtAccID>lwy_wbzj_jys</cashExtAccID>\n      <cashExtAccName>lwy_shg_001</cashExtAccName>\n      <cashAccID>LWY_NBZJ_JYS</cashAccID>\n      <cashAccIDAccName>LWY_NBZJ_JYS</cashAccIDAccName>\n      <xirSecuExtAccID>lwy_wbzq_sh_02</xirSecuExtAccID>\n      <xirSecuExtAccName>lwy_wbzq_sh_02</xirSecuExtAccName>\n      <secuAccID>LWY_NBZQ_JYS</secuAccID>\n      <secuAccName>LWY_NBZQ_JYS</secuAccName>\n    </accountInfo>\n    <terminalInfo>\n      <clientPublicIpAddress />\n      <clientPublicPort />\n      <clientInnerIpAddress />\n      <clientMacaddress />\n      <clientHarddiskno />\n      <clientPcname />\n      <clientCpuno />\n      <clientDiskpartitioninfo />\n      <clientReellabel />\n      <clientName>xIRCS</clientName>\n      <clientVersion />\n      <isTerminalinfo>0</isTerminalinfo>\n    </terminalInfo>\n  </body>\n</root>'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"连接数据查询","time":{"start":1687676870390,"stop":1687676870464,"duration":74},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.ordstatus,t.errinfo from ttrd_fix_order t  where t.sysordid=1687676867'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"1、数据库ORDSTATUS断言","time":{"start":1687676870464,"stop":1687676870468,"duration":4},"status":"failed","statusMessage":"AssertionError: assert 2 == 5\n","statusTrace":"  File \"D:\\LWY-Other\\Git_project\\step_pytest_allure_codeing\\testcase\\test_case_fix_excel.py\", line 117, in test_shg_fix\n    assert real_result == hope_result_dic_list[i][key]\n","steps":[{"name":"预期结果：ORDSTATUS=5","time":{"start":1687676870464,"stop":1687676870464,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"实际结果：ORDSTATUS=2","time":{"start":1687676870464,"stop":1687676870465,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 2 == 5\n","statusTrace":"  File \"D:\\LWY-Other\\Git_project\\step_pytest_allure_codeing\\testcase\\test_case_fix_excel.py\", line 117, in test_shg_fix\n    assert real_result == hope_result_dic_list[i][key]\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":5,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel::0","time":{"start":1687676896628,"stop":1687676896628,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"上交所固收（XSHG_FIX）"},{"name":"story","value":"协商成交（XSCJ_SHG）"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_case_fix_excel"},{"name":"host","value":"HT-LPC-0297"},{"name":"thread","value":"30680-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_case_fix_excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"(1, '上交所固收（XSHG_FIX）', '协商成交（XSCJ_SHG）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"510\",\"sysOrdID\":\"\"}', 'select t.ordstatus,t.errinfo from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5}', None)"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3da60df76ed71df0.json","parameterValues":["(1, '上交所固收（XSHG_FIX）', '协商成交（XSCJ_SHG）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"510\",\"sysOrdID\":\"\"}', 'select t.ordstatus,t.errinfo from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5}', None)"]}