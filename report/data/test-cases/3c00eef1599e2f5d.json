{"uid":"3c00eef1599e2f5d","name":"上交所协商成交_正常成交","fullName":"testcase.test_case_fix_excel#test_shg_fix","historyId":"d48b735703b8b6c435b2794d710e56a7","time":{"start":1688018274953,"stop":1688018285806,"duration":10853},"description":"上交所协商成交各接口各要素正确，正常成交","descriptionHtml":"<p>上交所协商成交各接口各要素正确，正常成交</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"data = (3, '债券回售（XSHG_LARGE）', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', '1101;1101', ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string(xml_list[i])\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n                            assert 0 == 1\n                        if flag:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    flag = True\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n>                                       result_list = tools.oracle_link(sql)\n\ntestcase\\test_case_fix_excel.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tools.tools.Tools object at 0x00000244A4FC5CF0>\nsql = 'select t.ordstatus from ttrd_fix_oder t  where t.sysordid=1688018280'\n\n    @allure.step('连接数据查询')\n    def oracle_link(self, sql):\n        conn = cx_Oracle.connect('xir_trd', 'xpar', '191.168.0.213:1521/orcl')\n        cursor = conn.cursor()\n>       all = cursor.execute(sql)\nE       cx_Oracle.DatabaseError: ORA-00942: 表或视图不存在\n\ntools\\tools.py:24: DatabaseError\n\nDuring handling of the above exception, another exception occurred:\n\ndata = (3, '债券回售（XSHG_LARGE）', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', '1101;1101', ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string(xml_list[i])\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n                            assert 0 == 1\n                        if flag:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    flag = True\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n                                        result_list = tools.oracle_link(sql)\n                                    except:\n                                        print('sql语句有误，请检查！！！')\n                                        sheet.cell(row_num, 12).value = 'sql语句有误，请检查！！！'\n                                        flag = False\n>                                       assert 0 == 1\nE                                       assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:151: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init","time":{"start":1688018171439,"stop":1688018173265,"duration":1826},"status":"passed","steps":[{"name":"连接数据查询","time":{"start":1688018171440,"stop":1688018173265,"duration":1825},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.init_date from ttrd_fix_setflag t'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true},{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel","time":{"start":1688018173265,"stop":1688018173287,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"上交所协商成交各接口各要素正确，正常成交","status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"data = (3, '债券回售（XSHG_LARGE）', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', '1101;1101', ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string(xml_list[i])\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n                            assert 0 == 1\n                        if flag:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    flag = True\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n>                                       result_list = tools.oracle_link(sql)\n\ntestcase\\test_case_fix_excel.py:146: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tools.tools.Tools object at 0x00000244A4FC5CF0>\nsql = 'select t.ordstatus from ttrd_fix_oder t  where t.sysordid=1688018280'\n\n    @allure.step('连接数据查询')\n    def oracle_link(self, sql):\n        conn = cx_Oracle.connect('xir_trd', 'xpar', '191.168.0.213:1521/orcl')\n        cursor = conn.cursor()\n>       all = cursor.execute(sql)\nE       cx_Oracle.DatabaseError: ORA-00942: 表或视图不存在\n\ntools\\tools.py:24: DatabaseError\n\nDuring handling of the above exception, another exception occurred:\n\ndata = (3, '债券回售（XSHG_LARGE）', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', '1101;1101', ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string(xml_list[i])\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n                            assert 0 == 1\n                        if flag:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    flag = True\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n                                        result_list = tools.oracle_link(sql)\n                                    except:\n                                        print('sql语句有误，请检查！！！')\n                                        sheet.cell(row_num, 12).value = 'sql语句有误，请检查！！！'\n                                        flag = False\n>                                       assert 0 == 1\nE                                       assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:151: AssertionError","steps":[{"name":"发送webservice请求","time":{"start":1688018274955,"stop":1688018275006,"duration":51},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"action","value":"'1101'"},{"name":"data","value":"'<root>\n  <header>\n    <msgType>R</msgType>\n    <action>1101</action>\n    <clientID>xIR</clientID>\n    <reqSn>7897b7e19186472f823bad3d04ec9799</reqSn>\n    <sendDateTime>2023-06-29 13:57:54</sendDateTime>\n    <fromIPMAC>191.168.0.53,</fromIPMAC>\n  </header>\n  <body>\n    <orders>\n      <order>\n        <secuExtAccid>B883056635</secuExtAccid>\n        <orderType>9</orderType>\n        <dir>B</dir>\n        <iCode>010706</iCode>\n        <sysOrdID>1688018274</sysOrdID>\n        <iName>MDe5+tWuMDY=</iName>\n        <exeMarket>XSHG_FIX</exeMarket>\n        <ownerType>103</ownerType>\n        <bOrdCount>120</bOrdCount>\n        <bOrdPrice>102.889</bOrdPrice>\n        <sOrdCount>0</sOrdCount>\n        <sOrdPrice>0</sOrdPrice>\n        <settlType>103</settlType>\n        <settlPeriod />\n        <lastParPx>0</lastParPx>\n        <cashMargin>1</cashMargin>\n        <memo />\n        <ordDate>2023-06-29</ordDate>\n        <ordTime>13:57:54</ordTime>\n        <matchNo>113</matchNo>\n        <product>01</product>\n        <tradeType>10</tradeType>\n        <company>316</company>\n        <trader>Z31605</trader>\n        <seatno>88045</seatno>\n        <obTrader>Z31608</obTrader>\n        <iceCount>0</iceCount>\n        <clientOrdid>lwy111</clientOrdid>\n        <accname>lwy_shg_B883056635</accname>\n        <shareProperty>01</shareProperty>\n      </order>\n    </orders>\n    <accountInfo>\n      <cashExtAccID>lwy_wbzj_jys</cashExtAccID>\n      <cashExtAccName>lwy_shg_001</cashExtAccName>\n      <cashAccID>LWY_NBZJ_JYS</cashAccID>\n      <cashAccIDAccName>LWY_NBZJ_JYS</cashAccIDAccName>\n      <xirSecuExtAccID>lwy_wbzq_sh_02</xirSecuExtAccID>\n      <xirSecuExtAccName>lwy_wbzq_sh_02</xirSecuExtAccName>\n      <secuAccID>LWY_NBZQ_JYS</secuAccID>\n      <secuAccName>LWY_NBZQ_JYS</secuAccName>\n    </accountInfo>\n    <terminalInfo>\n      <clientPublicIpAddress />\n      <clientPublicPort />\n      <clientInnerIpAddress />\n      <clientMacaddress />\n      <clientHarddiskno />\n      <clientPcname />\n      <clientCpuno />\n      <clientDiskpartitioninfo />\n      <clientReellabel />\n      <clientName>xIRCS</clientName>\n      <clientVersion />\n      <isTerminalinfo>0</isTerminalinfo>\n    </terminalInfo>\n  </body>\n</root>'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true},{"name":"发送webservice请求","time":{"start":1688018280009,"stop":1688018280038,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"action","value":"'1101'"},{"name":"data","value":"'<root>\n  <header>\n    <msgType>R</msgType>\n    <action>1101</action>\n    <clientID>xIR</clientID>\n    <reqSn>7897b7e19186472f823bad3d04ec9799</reqSn>\n    <sendDateTime>2023-06-29 13:58:00</sendDateTime>\n    <fromIPMAC>191.168.0.53,</fromIPMAC>\n  </header>\n  <body>\n    <orders>\n      <order>\n        <secuExtAccid>B883056635</secuExtAccid>\n        <orderType>9</orderType>\n        <dir>S</dir>\n        <iCode>010706</iCode>\n        <sysOrdID>1688018280</sysOrdID>\n        <iName>MDe5+tWuMDY=</iName>\n        <exeMarket>XSHG_FIX</exeMarket>\n        <ownerType>103</ownerType>\n        <bOrdCount>0</bOrdCount>\n        <bOrdPrice>0</bOrdPrice>\n        <sOrdCount>120</sOrdCount>\n        <sOrdPrice>102.889</sOrdPrice>\n        <settlType>103</settlType>\n        <settlPeriod />\n        <lastParPx>0</lastParPx>\n        <cashMargin>1</cashMargin>\n        <memo />\n        <ordDate>2023-06-29</ordDate>\n        <ordTime>13:58:00</ordTime>\n        <matchNo>113</matchNo>\n        <product>01</product>\n        <tradeType>10</tradeType>\n        <company>316</company>\n        <trader>Z31608</trader>\n        <seatno>88045</seatno>\n        <obTrader>Z31605</obTrader>\n        <iceCount>0</iceCount>\n        <clientOrdid>lwy111</clientOrdid>\n        <accname>lwy_shg_B883056635</accname>\n        <shareProperty>01</shareProperty>\n      </order>\n    </orders>\n    <accountInfo>\n      <cashExtAccID>lwy_wbzj_jys</cashExtAccID>\n      <cashExtAccName>lwy_shg_001</cashExtAccName>\n      <cashAccID>LWY_NBZJ_JYS</cashAccID>\n      <cashAccIDAccName>LWY_NBZJ_JYS</cashAccIDAccName>\n      <xirSecuExtAccID>lwy_wbzq_sh_02</xirSecuExtAccID>\n      <xirSecuExtAccName>lwy_wbzq_sh_02</xirSecuExtAccName>\n      <secuAccID>LWY_NBZQ_JYS</secuAccID>\n      <secuAccName>LWY_NBZQ_JYS</secuAccName>\n    </accountInfo>\n    <terminalInfo>\n      <clientPublicIpAddress />\n      <clientPublicPort />\n      <clientInnerIpAddress />\n      <clientMacaddress />\n      <clientHarddiskno />\n      <clientPcname />\n      <clientCpuno />\n      <clientDiskpartitioninfo />\n      <clientReellabel />\n      <clientName>xIRCS</clientName>\n      <clientVersion />\n      <isTerminalinfo>0</isTerminalinfo>\n    </terminalInfo>\n  </body>\n</root>'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true},{"name":"连接数据查询","time":{"start":1688018285038,"stop":1688018285770,"duration":732},"status":"broken","statusMessage":"cx_Oracle.DatabaseError: ORA-00942: 表或视图不存在\n","statusTrace":"  File \"D:\\LWY-Other\\Git_project\\step_pytest_allure_codeing\\myvenv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"D:\\LWY-Other\\Git_project\\step_pytest_allure_codeing\\tools\\tools.py\", line 24, in oracle_link\n    all = cursor.execute(sql)\n","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.ordstatus from ttrd_fix_oder t  where t.sysordid=1688018280'"}],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"5ae94f4f924c0e5","name":"stdout","source":"5ae94f4f924c0e5.txt","type":"text/plain","size":37}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":3,"hasContent":true},"afterStages":[{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel::0","time":{"start":1688018357784,"stop":1688018357784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"上交所综业平台（XSHG_LARGE）"},{"name":"story","value":"债券回售（XSHG_LARGE）"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_case_fix_excel"},{"name":"host","value":"HT-LPC-0297"},{"name":"thread","value":"64952-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_case_fix_excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"(3, '债券回售（XSHG_LARGE）', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', '1101;1101', 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml;data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"113\",\"sysOrdID\":\"\",\"dir\":\"B\",\"bOrdCount\":\"120\",\"bOrdPrice\":\"102.889\",\"sOrdCount\":\"0\",\"sOrdPrice\":\"0\",\"trader\":\"Z31605\",\"obTrader\":\"Z31608\"};{\"sysOrdID\":\"\",\"matchNo\":\"113\",\"dir\":\"S\",\"sOrdCount\":\"120\",\"sOrdPrice\":\"102.889\",\"bOrdCount\":\"0\",\"bOrdPrice\":\"0\",\"trader\":\"Z31608\",\"obTrader\":\"Z31605\"}', 'select t.ordstatus from ttrd_fix_oder t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":7}', 'sql语句有误，请检查！！！', '上交所综业平台（XSHG_LARGE）')"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3c00eef1599e2f5d.json","parameterValues":["(3, '债券回售（XSHG_LARGE）', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', '1101;1101', 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml;data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"113\",\"sysOrdID\":\"\",\"dir\":\"B\",\"bOrdCount\":\"120\",\"bOrdPrice\":\"102.889\",\"sOrdCount\":\"0\",\"sOrdPrice\":\"0\",\"trader\":\"Z31605\",\"obTrader\":\"Z31608\"};{\"sysOrdID\":\"\",\"matchNo\":\"113\",\"dir\":\"S\",\"sOrdCount\":\"120\",\"sOrdPrice\":\"102.889\",\"bOrdCount\":\"0\",\"bOrdPrice\":\"0\",\"trader\":\"Z31608\",\"obTrader\":\"Z31605\"}', 'select t.ordstatus from ttrd_fix_oder t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":7}', 'sql语句有误，请检查！！！', '上交所综业平台（XSHG_LARGE）')"]}