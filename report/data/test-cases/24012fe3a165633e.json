{"uid":"24012fe3a165633e","name":"上交所协商成交_正常成交","fullName":"testcase.test_case_fix_excel#test_shg_fix","historyId":"27c9530ff1cf587f85d60a40134ff3ac","time":{"start":1688463740362,"stop":1688463740363,"duration":1},"description":"上交所协商成交各接口各要素正确，正常成交","descriptionHtml":"<p>上交所协商成交各接口各要素正确，正常成交</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"data = (3, '协商成交（XSCJ_SHG）_反向用例', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data',read_excel())\n    def test_shg_fix(data):\n        if data[12] == 'no':\n            pytest.skip(\"Skipping test due to 'skip' field in Excel data\")\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string('data/temp.xml')\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n                            assert 0 == 1\n                        if flag:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    flag = True\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n                                        result_list = tools.oracle_link(sql)\n                                    except:\n                                        print('sql语句有误，请检查！！！')\n                                        sheet.cell(row_num, 12).value = 'sql语句有误，请检查！！！'\n                                        flag = False\n                                        assert 0 == 1\n                                    if flag:\n    \n                                        for key in hope_result_dic_list[i].keys():\n                                            real_result = result_list[key]\n                                            if real_result == hope_result_dic_list[i][key]:\n                                                sheet.cell(row_num, 12).value = '测试通过'\n                                            else:\n                                                print('测试不通过')\n                                                sheet.cell(row_num, 12).value = '测试不通过'\n                                        for key in hope_result_dic_list[i].keys():\n                                            with allure.step(f\"数据库{key}断言\"):\n                                                with allure.step(f'预期结果：{key}={hope_result_dic_list[i][key]}'):\n                                                    real_result = result_list[key]\n                                                with allure.step(f'实际结果：{key}={real_result}'):\n                                                    assert real_result == hope_result_dic_list[i][key]\n                                    else:\n                                        pass\n                            else:\n                                print('查询sql与预期结果字典个数不对应，请检查！！！')\n                                sheet.cell(row_num, 12).value = '查询sql与预期结果字典个数不对应，请检查！！！'\n                                assert 0 == 1\n                        else:\n                            pass\n                    else:\n                        pass\n                else:\n                    print('查询数据库sql或者预期结果或者数据变量缺失，请检查！！！')\n                    sheet.cell(row_num, 12).value = \"查询数据库sql或者预期结果确实，请检查！！！\"\n                    assert 0 ==1\n            else:\n                pass\n        else:\n            print('用例中传递的功能号、读取报文地址、修改参数个数不正确请检查！！！')\n            sheet.cell(row_num, 12).value = \"用例中传递的功能号、读取报文地址、修改参数个数不对应请检查！！！\"\n>           assert 0 == 1\nE           assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:188: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"交易初始化","time":{"start":1688463701890,"stop":1688463709442,"duration":7552},"status":"passed","steps":[{"name":"连接数据查询","time":{"start":1688463701890,"stop":1688463709442,"duration":7552},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.init_date from ttrd_fix_setflag t'"}],"hasContent":true,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel","time":{"start":1688463709443,"stop":1688463709464,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"上交所协商成交各接口各要素正确，正常成交","status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"data = (3, '协商成交（XSCJ_SHG）_反向用例', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data',read_excel())\n    def test_shg_fix(data):\n        if data[12] == 'no':\n            pytest.skip(\"Skipping test due to 'skip' field in Excel data\")\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string('data/temp.xml')\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n                    assert 0 == 1\n            if flag :\n                if data[8] is not None and data[9] is not None and data[10] is not None:\n                    # 查询数据库的基础sql\n                    sql_str = data[8]\n                    sql_str_list = sql_str.split(';')\n                    # 获取预期结果的内容\n                    hope_result = data[10]\n                    hope_result_list = hope_result.split(';')\n                    hope_result_dic_list = []\n                    # 数据库变量\n                    sql_param_str = data[9]\n                    # 将数据库变量用\";\"分隔\n                    sql_param_list = sql_param_str.split(';')\n                    # 存储经过转换后的数据库变量\n                    param_list_num = []\n                    # 获取列表长度\n                    length = len(sql_param_list)\n                    # 循环解析all_val[]值并填入list1\n                    for j in range(length):\n                        flag=True\n                        try:\n                            param_list_num.append(eval(sql_param_list[j]))\n                        except:\n                            print('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                            sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                            flag = False\n                            assert 0 == 1\n                    if flag:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            print('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            flag = False\n                            assert 0 == 1\n                        if flag:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    flag = True\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n                                        result_list = tools.oracle_link(sql)\n                                    except:\n                                        print('sql语句有误，请检查！！！')\n                                        sheet.cell(row_num, 12).value = 'sql语句有误，请检查！！！'\n                                        flag = False\n                                        assert 0 == 1\n                                    if flag:\n    \n                                        for key in hope_result_dic_list[i].keys():\n                                            real_result = result_list[key]\n                                            if real_result == hope_result_dic_list[i][key]:\n                                                sheet.cell(row_num, 12).value = '测试通过'\n                                            else:\n                                                print('测试不通过')\n                                                sheet.cell(row_num, 12).value = '测试不通过'\n                                        for key in hope_result_dic_list[i].keys():\n                                            with allure.step(f\"数据库{key}断言\"):\n                                                with allure.step(f'预期结果：{key}={hope_result_dic_list[i][key]}'):\n                                                    real_result = result_list[key]\n                                                with allure.step(f'实际结果：{key}={real_result}'):\n                                                    assert real_result == hope_result_dic_list[i][key]\n                                    else:\n                                        pass\n                            else:\n                                print('查询sql与预期结果字典个数不对应，请检查！！！')\n                                sheet.cell(row_num, 12).value = '查询sql与预期结果字典个数不对应，请检查！！！'\n                                assert 0 == 1\n                        else:\n                            pass\n                    else:\n                        pass\n                else:\n                    print('查询数据库sql或者预期结果或者数据变量缺失，请检查！！！')\n                    sheet.cell(row_num, 12).value = \"查询数据库sql或者预期结果确实，请检查！！！\"\n                    assert 0 ==1\n            else:\n                pass\n        else:\n            print('用例中传递的功能号、读取报文地址、修改参数个数不正确请检查！！！')\n            sheet.cell(row_num, 12).value = \"用例中传递的功能号、读取报文地址、修改参数个数不对应请检查！！！\"\n>           assert 0 == 1\nE           assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:188: AssertionError","steps":[],"attachments":[{"uid":"133c8b6da931d78e","name":"stdout","source":"133c8b6da931d78e.txt","type":"text/plain","size":194}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel::0","time":{"start":1688463771197,"stop":1688463771197,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"上交所固收（XSHG_FIX）"},{"name":"story","value":"协商成交（XSCJ_SHG）_反向用例"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_case_fix_excel"},{"name":"host","value":"HT-LPC-0297"},{"name":"thread","value":"64880-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_case_fix_excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"(3, '协商成交（XSCJ_SHG）_反向用例', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml;data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"113\",\"sysOrdID\":\"\",\"dir\":\"B\",\"bOrdCount\":\"120\",\"bOrdPrice\":\"102.8893\",\"sOrdCount\":\"0\",\"sOrdPrice\":\"0\",\"trader\":\"Z31605\",\"obTrader\":\"Z31608\"};{\"sysOrdID\":\"\",\"matchNo\":\"113\",\"dir\":\"S\",\"sOrdCount\":\"120\",\"sOrdPrice\":\"102.889\",\"bOrdCount\":\"0\",\"bOrdPrice\":\"0\",\"trader\":\"Z31608\",\"obTrader\":\"Z31605\"}', 'select t.ordstatus from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":7}', '用例中传递的功能号、读取报文地址、修改参数个数不对应请检查！！！', 'yes', '上交所固收（XSHG_FIX）')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[{"uid":"b95ce55dc490f95d","status":"failed","statusDetails":"AssertionError: assert 0 == 1","time":{"start":1688463740348,"stop":1688463740348,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"24012fe3a165633e.json","parameterValues":["(3, '协商成交（XSCJ_SHG）_反向用例', '上交所协商成交_正常成交', '上交所协商成交各接口各要素正确，正常成交', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml;data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"113\",\"sysOrdID\":\"\",\"dir\":\"B\",\"bOrdCount\":\"120\",\"bOrdPrice\":\"102.8893\",\"sOrdCount\":\"0\",\"sOrdPrice\":\"0\",\"trader\":\"Z31605\",\"obTrader\":\"Z31608\"};{\"sysOrdID\":\"\",\"matchNo\":\"113\",\"dir\":\"S\",\"sOrdCount\":\"120\",\"sOrdPrice\":\"102.889\",\"bOrdCount\":\"0\",\"bOrdPrice\":\"0\",\"trader\":\"Z31608\",\"obTrader\":\"Z31605\"}', 'select t.ordstatus from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":7}', '用例中传递的功能号、读取报文地址、修改参数个数不对应请检查！！！', 'yes', '上交所固收（XSHG_FIX）')"]}