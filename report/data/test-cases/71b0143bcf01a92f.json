{"uid":"71b0143bcf01a92f","name":"上交所协商成交_正常申报","fullName":"testcase.test_case_fix_excel#test_shg_fix","historyId":"38c8e3a36cb1afdfefa42b7695e25d61","time":{"start":1688018234634,"stop":1688018234634,"duration":0},"description":"上交所协商成交各接口各要素正确，申报成功","descriptionHtml":"<p>上交所协商成交各接口各要素正确，申报成功</p>\n","status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"data = (1, '债券回售（XSHG_LARGE）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n>                   param_list_i = eval(param_list[i])\nE                     File \"<string>\", line 1\nE                       {\"matchNo\":\"111\",\"sysOrdID\":\"\"\nE                       ^\nE                   SyntaxError: '{' was never closed\n\ntestcase\\test_case_fix_excel.py:71: SyntaxError\n\nDuring handling of the above exception, another exception occurred:\n\ndata = (1, '债券回售（XSHG_LARGE）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string(xml_list[i])\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n>                   assert 0 == 1\nE                   assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:102: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"init","time":{"start":1688018171439,"stop":1688018173265,"duration":1826},"status":"passed","steps":[{"name":"连接数据查询","time":{"start":1688018171440,"stop":1688018173265,"duration":1825},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.init_date from ttrd_fix_setflag t'"}],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true},{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel","time":{"start":1688018173265,"stop":1688018173287,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"上交所协商成交各接口各要素正确，申报成功","status":"failed","statusMessage":"AssertionError: assert 0 == 1","statusTrace":"data = (1, '债券回售（XSHG_LARGE）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n>                   param_list_i = eval(param_list[i])\nE                     File \"<string>\", line 1\nE                       {\"matchNo\":\"111\",\"sysOrdID\":\"\"\nE                       ^\nE                   SyntaxError: '{' was never closed\n\ntestcase\\test_case_fix_excel.py:71: SyntaxError\n\nDuring handling of the above exception, another exception occurred:\n\ndata = (1, '债券回售（XSHG_LARGE）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data', read_excel())\n    def test_shg_fix(data):\n        # 动态生成测试用例的feature(一个feature代表一个sheet页)、story(一个story一个业务)、\n        # title(测试用例名称)、description、severity\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        # 获取当前sheet页的名字和所在行数\n        sheet_active = data[-1]\n        sheet = excel[sheet_active]\n        row_num = data[0] + 1\n    \n        # 将从excel中读取的数据放入参数中\n        # 获取功能号单元格的数据数据\n        action_str = str(data[5])\n        # 获取需要读取的xml文件数据\n        xml_str = data[6]\n        # 获取需要重新设置的参数数据\n        param_str = data[7]\n        # 各个数据分别使用“;”分开，获取list\n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            # 用来标志下面的代码是否需要运行：\n            flag = True\n            # 对于每一行action有多个数据时，循环发送请求\n            for i in range(len(act_list)):\n                # 获取当前系统的时间\n                long_date, local_date, local_time = tools.get_system_time()\n                # 使用random,生成需要每次不能重复的约定号\n                # 当前请求的参数设置\n                try:\n                    # 将修改参数转换成字典格式\n                    param_list_i = eval(param_list[i])\n                    # 将系统时间等信息设置到xml报文中,申报类的报文，默认将这些都添加到参数中\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n    \n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n                    # if 'matchNo' in param_list_i.keys():\n                    #     match_no = str(random.randint(100, 999))\n                    #     param_list_i['matchNo'] = match_no\n                    #     all_val['matchNo'] = match_no\n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string(xml_list[i])\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    time.sleep(5)\n                except:\n                    print('修改参数转换成字典格式错误，请检查修改参数列数据！！！')\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    flag = False\n>                   assert 0 == 1\nE                   assert 0 == 1\n\ntestcase\\test_case_fix_excel.py:102: AssertionError","steps":[],"attachments":[{"uid":"38c378d32331bf97","name":"stdout","source":"38c378d32331bf97.txt","type":"text/plain","size":328}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_fix_excel::0","time":{"start":1688018357784,"stop":1688018357784,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"上交所综业平台（XSHG_LARGE）"},{"name":"story","value":"债券回售（XSHG_LARGE）"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_case_fix_excel"},{"name":"host","value":"HT-LPC-0297"},{"name":"thread","value":"64952-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_case_fix_excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"(1, '债券回售（XSHG_LARGE）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"111\",\"sysOrdID\":\"\"', 'select t.ordstatus,t.errinfo from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5}', '修改参数转换成字典格式错误，请检查修改参数列数据！！！', '上交所综业平台（XSHG_LARGE）')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[{"uid":"90b9107e65d581e7","status":"failed","statusDetails":"AssertionError: assert 0 == 1","time":{"start":1688018234618,"stop":1688018234618,"duration":0}},{"uid":"d19ec79872340518","status":"failed","statusDetails":"AssertionError: assert 0 == 1","time":{"start":1688018234600,"stop":1688018234601,"duration":1}},{"uid":"ec60ddac764b7358","status":"failed","statusDetails":"AssertionError: assert 0 == 1","time":{"start":1688018234581,"stop":1688018234582,"duration":1}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"71b0143bcf01a92f.json","parameterValues":["(1, '债券回售（XSHG_LARGE）', '上交所协商成交_正常申报', '上交所协商成交各接口各要素正确，申报成功', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"111\",\"sysOrdID\":\"\"', 'select t.ordstatus,t.errinfo from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5}', '修改参数转换成字典格式错误，请检查修改参数列数据！！！', '上交所综业平台（XSHG_LARGE）')"]}