{"uid":"8a2eaf51adc3ca90","name":"上交所协商成交_方向校验","fullName":"testcase.test_case_excel#test_jys","historyId":"0538330fe5bae348c01e70259903f337","time":{"start":1704955846265,"stop":1704955851671,"duration":5406},"description":"上交所协商成交除交易方向其他要素正确，交易方向为D","descriptionHtml":"<p>上交所协商成交除交易方向其他要素正确，交易方向为D</p>\n","status":"failed","statusMessage":"AssertionError: assert 2 == 5","statusTrace":"data = (9, '协商成交（XSCJ_SHG）_反向用例_交易方向校验', '上交所协商成交_方向校验', '上交所协商成交除交易方向其他要素正确，交易方向为D', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data',read_excel())\n    def test_jys(data):\n        data1 = get_date_from_cache()\n        print(data1)\n        MY_LOGGER.info(data1)\n        # 记录日志\n        MY_LOGGER.info('从excel获取的测试用例数据！！！！')\n        MY_LOGGER.info(data)\n        if data[12] == 'no':\n            pytest.skip(\"标记该用例为不执行\")\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        excel = openpyxl.load_workbook(data[-2])\n        sheet = excel[data[-1]]\n        row_num = data[0] + 1\n    \n        action_str = str(data[5])\n        xml_str = data[6]\n        param_str = data[7]\n    \n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            for i in range(len(act_list)):\n                long_date, local_date, local_time = tools.get_system_time()\n                try:\n                    param_list_i = eval(param_list[i])\n                except Exception as e:\n                    MY_LOGGER.error('用例中传递的功能号、读取报文地址、修改参数个数不正确请检查！！！')\n                    MY_LOGGER.error(str(e))\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    excel.save(data[-2])\n                    assert 0==1\n                else:\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n    \n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string('data/temp.xml')\n                    MY_LOGGER.info(data_xml)\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    MY_LOGGER.info(result)\n                    time.sleep(5)\n    \n            if data[8] is not None and data[9] is not None and data[10] is not None:\n                sql_str = data[8]\n                sql_str_list = sql_str.split(';')\n    \n                hope_result = data[10]\n                hope_result_list = hope_result.split(';')\n                hope_result_dic_list = []\n    \n                sql_param_str = data[9]\n                sql_param_list = sql_param_str.split(';')\n                param_list_num = []\n                length = len(sql_param_list)\n    \n                for j in range(length):\n                    try:\n                        param_list_num.append(eval(sql_param_list[j]))\n                    except:\n                        sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                        MY_LOGGER.info('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                        excel.save(data[-2])\n                        assert 0 == 1\n                    else:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            MY_LOGGER.info('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            excel.save(data[-2])\n                            assert 0 == 1\n                        else:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    tools.conn_oracle(\n                                        dsn=ORACLE_DSN,\n                                        user=ORACLE_USER,\n                                        passwd=ORACLE_PASSWORD\n                                    )\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n                                        MY_LOGGER.info(sql)\n                                    except:\n                                        sheet.cell(row_num, 12).value = 'sql语句有误，请检查！！！'\n                                        MY_LOGGER.info('sql语句有误，请检查！！！')\n                                        excel.save(data[-2])\n                                        assert 0 == 1\n                                    else:\n                                        result_list = tools.sql_check(sql)\n                                        MY_LOGGER.info(result_list)\n                                        for key in hope_result_dic_list[i].keys():\n                                            real_result = result_list[key]\n                                            if real_result == hope_result_dic_list[i][key]:\n                                                sheet.cell(row_num, 12).value = '测试通过'\n                                                MY_LOGGER.info('测试通过')\n                                                excel.save(data[-2])\n                                            else:\n                                                sheet.cell(row_num, 12).value = '测试不通过'\n                                                MY_LOGGER.info('测试不通过')\n                                                excel.save(data[-2])\n                                        for key in hope_result_dic_list[i].keys():\n                                            with allure.step(f\"数据库{key}断言\"):\n                                                with allure.step(f'预期结果：{key}={hope_result_dic_list[i][key]}'):\n                                                    real_result = result_list[key]\n                                                with allure.step(f'实际结果：{key}={real_result}'):\n>                                                   assert real_result == hope_result_dic_list[i][key]\nE                                                   assert 2 == 5\n\ntestcase\\test_case_excel.py:159: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"交易初始化","time":{"start":1704955780233,"stop":1704955780539,"duration":306},"status":"passed","steps":[{"name":"数据库查询","time":{"start":1704955780527,"stop":1704955780530,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.init_date from ttrd_fix_setflag t'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_excel","time":{"start":1704955780539,"stop":1704955780539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"上交所协商成交除交易方向其他要素正确，交易方向为D","status":"failed","statusMessage":"AssertionError: assert 2 == 5","statusTrace":"data = (9, '协商成交（XSCJ_SHG）_反向用例_交易方向校验', '上交所协商成交_方向校验', '上交所协商成交除交易方向其他要素正确，交易方向为D', 'blocker', 1101, ...)\n\n    @pytest.mark.parametrize('data',read_excel())\n    def test_jys(data):\n        data1 = get_date_from_cache()\n        print(data1)\n        MY_LOGGER.info(data1)\n        # 记录日志\n        MY_LOGGER.info('从excel获取的测试用例数据！！！！')\n        MY_LOGGER.info(data)\n        if data[12] == 'no':\n            pytest.skip(\"标记该用例为不执行\")\n        if data[-1] is not None:\n            allure.dynamic.feature(data[-1])\n        if data[1] is not None:\n            allure.dynamic.story(data[1])\n        if data[2] is not None:\n            allure.dynamic.title(data[2])\n        if data[3] is not None:\n            allure.dynamic.description(data[3])\n        if data[4] is not None:\n            allure.dynamic.severity(data[4])\n    \n        excel = openpyxl.load_workbook(data[-2])\n        sheet = excel[data[-1]]\n        row_num = data[0] + 1\n    \n        action_str = str(data[5])\n        xml_str = data[6]\n        param_str = data[7]\n    \n        act_list = action_str.split(';')\n        xml_list = xml_str.split(';')\n        param_list = param_str.split(';')\n    \n        # 判断用例中传递的功能号、读取报文地址、修改参数个数是否对应正确\n        if len(act_list) == len(xml_list) == len(param_list):\n            for i in range(len(act_list)):\n                long_date, local_date, local_time = tools.get_system_time()\n                try:\n                    param_list_i = eval(param_list[i])\n                except Exception as e:\n                    MY_LOGGER.error('用例中传递的功能号、读取报文地址、修改参数个数不正确请检查！！！')\n                    MY_LOGGER.error(str(e))\n                    sheet.cell(row_num, 12).value = '修改参数转换成字典格式错误，请检查修改参数列数据！！！'\n                    excel.save(data[-2])\n                    assert 0==1\n                else:\n                    param_list_i['sendDateTime'] = long_date\n                    param_list_i['ordDate'] = local_date\n                    param_list_i['ordTime'] = local_time\n                    param_list_i['actDate'] = local_date\n                    param_list_i['actTime'] = local_time\n                    param_list_i['orgOrdDate'] = local_date\n                    # 按照时间戳生成主键sysOrdID，并将该值存储在all_val，以便后续查询数字库，做断言使用\n                    if 'sysOrdID' in param_list_i.keys():\n                        sysord_id = str(int(time.time()))\n                        param_list_i['sysOrdID'] = sysord_id\n                        all_val['sysOrdID'] = sysord_id\n    \n                    # 如果参数中有orgSysOrdID字段，则需要取出all_val中的sysOrdID值，对该笔报价进行撤单\n                    if 'orgSysOrdID' in param_list_i.keys():\n                        param_list_i['orgSysOrdID'] = all_val['sysOrdID']\n                    # 获取了所有最新的需要修改的参数之后，调用工具函数将各个参数写入xml文件中\n                    set_xml(xml_list[i], param_list_i)\n                    data_xml = set_xml_string('data/temp.xml')\n                    MY_LOGGER.info(data_xml)\n                    # 发送请求\n                    result = tools.send_post(act_list[i], data_xml)\n                    MY_LOGGER.info(result)\n                    time.sleep(5)\n    \n            if data[8] is not None and data[9] is not None and data[10] is not None:\n                sql_str = data[8]\n                sql_str_list = sql_str.split(';')\n    \n                hope_result = data[10]\n                hope_result_list = hope_result.split(';')\n                hope_result_dic_list = []\n    \n                sql_param_str = data[9]\n                sql_param_list = sql_param_str.split(';')\n                param_list_num = []\n                length = len(sql_param_list)\n    \n                for j in range(length):\n                    try:\n                        param_list_num.append(eval(sql_param_list[j]))\n                    except:\n                        sheet.cell(row_num, 12).value = '数据库变量转换失败，请检查数据库变量列的数据！！！'\n                        MY_LOGGER.info('数据库变量转换失败，请检查数据库变量列的数据！！！')\n                        excel.save(data[-2])\n                        assert 0 == 1\n                    else:\n                        try:\n                            for item in hope_result_list:\n                                temp_item = eval(item)\n                                hope_result_dic_list.append(temp_item)\n                        except:\n                            sheet.cell(row_num, 12).value = '预期结果值转换成字典格式失败，请检查预期结果列数据！！！'\n                            MY_LOGGER.info('预期结果值转换成字典格式失败，请检查预期结果列数据！！！')\n                            excel.save(data[-2])\n                            assert 0 == 1\n                        else:\n                            if len(hope_result_dic_list) == len(sql_str_list):\n                                for i in range(len(sql_str_list)):\n                                    tools.conn_oracle(\n                                        dsn=ORACLE_DSN,\n                                        user=ORACLE_USER,\n                                        passwd=ORACLE_PASSWORD\n                                    )\n                                    try:\n                                        sql = sql_str_list[i].format(*param_list_num)\n                                        MY_LOGGER.info(sql)\n                                    except:\n                                        sheet.cell(row_num, 12).value = 'sql语句有误，请检查！！！'\n                                        MY_LOGGER.info('sql语句有误，请检查！！！')\n                                        excel.save(data[-2])\n                                        assert 0 == 1\n                                    else:\n                                        result_list = tools.sql_check(sql)\n                                        MY_LOGGER.info(result_list)\n                                        for key in hope_result_dic_list[i].keys():\n                                            real_result = result_list[key]\n                                            if real_result == hope_result_dic_list[i][key]:\n                                                sheet.cell(row_num, 12).value = '测试通过'\n                                                MY_LOGGER.info('测试通过')\n                                                excel.save(data[-2])\n                                            else:\n                                                sheet.cell(row_num, 12).value = '测试不通过'\n                                                MY_LOGGER.info('测试不通过')\n                                                excel.save(data[-2])\n                                        for key in hope_result_dic_list[i].keys():\n                                            with allure.step(f\"数据库{key}断言\"):\n                                                with allure.step(f'预期结果：{key}={hope_result_dic_list[i][key]}'):\n                                                    real_result = result_list[key]\n                                                with allure.step(f'实际结果：{key}={real_result}'):\n>                                                   assert real_result == hope_result_dic_list[i][key]\nE                                                   assert 2 == 5\n\ntestcase\\test_case_excel.py:159: AssertionError","steps":[{"name":"发送webservice请求","time":{"start":1704955846312,"stop":1704955846357,"duration":45},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"action","value":"'1101'"},{"name":"data","value":"'<?xml version='1.0' encoding='utf-8'?>\n<root>\n  <header>\n    <msgType>R</msgType>\n    <action>1101</action>\n    <clientID>xIR</clientID>\n    <reqSn>7897b7e19186472f823bad3d04ec9799</reqSn>\n    <sendDateTime>2024-01-11 14:50:46</sendDateTime>\n    <fromIPMAC>191.168.0.53,</fromIPMAC>\n  </header>\n  <body>\n    <orders>\n      <order>\n        <secuExtAccid>B883056635</secuExtAccid>\n        <orderType>9</orderType>\n        <dir>D</dir>\n        <iCode>010609</iCode>\n        <sysOrdID>1704955846</sysOrdID>\n        <iName>MDe5+tWuMDY=</iName>\n        <exeMarket>XSHG_FIX</exeMarket>\n        <ownerType>103</ownerType>\n        <bOrdCount>100</bOrdCount>\n        <bOrdPrice>102</bOrdPrice>\n        <sOrdCount>100</sOrdCount>\n        <sOrdPrice>102.000</sOrdPrice>\n        <settlType>103</settlType>\n        <settlPeriod />\n        <lastParPx>0</lastParPx>\n        <cashMargin>1</cashMargin>\n        <memo />\n        <ordDate>2024-01-11</ordDate>\n        <ordTime>14:50:46</ordTime>\n        <matchNo>118</matchNo>\n        <product>01</product>\n        <tradeType>10</tradeType>\n        <company>316</company>\n        <trader>Z31608</trader>\n        <seatno>88045</seatno>\n        <obTrader>Z31606</obTrader>\n        <iceCount>0</iceCount>\n        <clientOrdid>lwy111</clientOrdid>\n        <accname>lwy_shg_B883056635</accname>\n        <shareProperty>01</shareProperty>\n      </order>\n    </orders>\n    <accountInfo>\n      <cashExtAccID>lwy_wbzj_jys</cashExtAccID>\n      <cashExtAccName>lwy_shg_001</cashExtAccName>\n      <cashAccID>LWY_NBZJ_JYS</cashAccID>\n      <cashAccIDAccName>LWY_NBZJ_JYS</cashAccIDAccName>\n      <xirSecuExtAccID>lwy_wbzq_sh_02</xirSecuExtAccID>\n      <xirSecuExtAccName>lwy_wbzq_sh_02</xirSecuExtAccName>\n      <secuAccID>LWY_NBZQ_JYS</secuAccID>\n      <secuAccName>LWY_NBZQ_JYS</secuAccName>\n    </accountInfo>\n    <terminalInfo>\n      <clientPublicIpAddress />\n      <clientPublicPort />\n      <clientInnerIpAddress />\n      <clientMacaddress />\n      <clientHarddiskno />\n      <clientPcname />\n      <clientCpuno />\n      <clientDiskpartitioninfo />\n      <clientReellabel />\n      <clientName>xIRCS</clientName>\n      <clientVersion />\n      <isTerminalinfo>0</isTerminalinfo>\n    </terminalInfo>\n  </body>\n</root>'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"数据库查询","time":{"start":1704955851456,"stop":1704955851462,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sql","value":"'select t.dir,t.ordstatus,t.errinfo,t.S_ORDCOUNT,t.S_ORDPRICE from ttrd_fix_order t  where t.sysordid=1704955846'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"数据库ORDSTATUS断言","time":{"start":1704955851670,"stop":1704955851671,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 2 == 5\n","statusTrace":"  File \"D:\\LWY-Other\\Git_project\\step_pytest_allure_codeing\\testcase\\test_case_excel.py\", line 159, in test_jys\n    assert real_result == hope_result_dic_list[i][key]\n","steps":[{"name":"预期结果：ORDSTATUS=5","time":{"start":1704955851670,"stop":1704955851670,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"实际结果：ORDSTATUS=2","time":{"start":1704955851670,"stop":1704955851670,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 2 == 5\n","statusTrace":"  File \"D:\\LWY-Other\\Git_project\\step_pytest_allure_codeing\\testcase\\test_case_excel.py\", line 159, in test_jys\n    assert real_result == hope_result_dic_list[i][key]\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[{"uid":"106e66f14429f783","name":"log","source":"106e66f14429f783.txt","type":"text/plain","size":4477}],"parameters":[],"stepsCount":5,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"_xunit_setup_module_fixture_step_pytest_allure_codeing.testcase.test_case_excel::0","time":{"start":1704955923646,"stop":1704955923646,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"上交所固收（XSHG_FIX）"},{"name":"story","value":"协商成交（XSCJ_SHG）_反向用例_交易方向校验"},{"name":"severity","value":"blocker"},{"name":"parentSuite","value":"testcase"},{"name":"suite","value":"test_case_excel"},{"name":"host","value":"HT-LPC-0297"},{"name":"thread","value":"3412-Thread-1 (run_test_task)"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcase.test_case_excel"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"(9, '协商成交（XSCJ_SHG）_反向用例_交易方向校验', '上交所协商成交_方向校验', '上交所协商成交除交易方向其他要素正确，交易方向为D', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"118\",\"sysOrdID\":\"\",\"dir\":\"D\",\"bOrdCount\":\"100\",\"bOrdPrice\":\"102\",\"sOrdCount\":\"100\",\"sOrdPrice\":\"102.000\"}', 'select t.dir,t.ordstatus,t.errinfo,t.S_ORDCOUNT,t.S_ORDPRICE from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5,\"DIR\":\"D\",\"S_ORDCOUNT\":100,\"S_ORDPRICE\":102.0000}', '测试通过', 'yes', None, 'data/step_case_shg.xlsx', '上交所固收（XSHG_FIX）')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"8a2eaf51adc3ca90.json","parameterValues":["(9, '协商成交（XSCJ_SHG）_反向用例_交易方向校验', '上交所协商成交_方向校验', '上交所协商成交除交易方向其他要素正确，交易方向为D', 'blocker', 1101, 'data/shg_fix/DS_1101_SHG_Fix_XSCJ.xml', '{\"matchNo\":\"118\",\"sysOrdID\":\"\",\"dir\":\"D\",\"bOrdCount\":\"100\",\"bOrdPrice\":\"102\",\"sOrdCount\":\"100\",\"sOrdPrice\":\"102.000\"}', 'select t.dir,t.ordstatus,t.errinfo,t.S_ORDCOUNT,t.S_ORDPRICE from ttrd_fix_order t  where t.sysordid={0}', 'all_val[\"sysOrdID\"]', '{\"ORDSTATUS\":5,\"DIR\":\"D\",\"S_ORDCOUNT\":100,\"S_ORDPRICE\":102.0000}', '测试通过', 'yes', None, 'data/step_case_shg.xlsx', '上交所固收（XSHG_FIX）')"]}